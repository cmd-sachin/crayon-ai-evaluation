{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/sachin-crayon-d/Gen%20Ai%20Hackathon/task-evaluation-platform/src/app/stores/quizStore.js"],"sourcesContent":["import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\nconst DEFAULT_STATE = {\n  currentQuestionIndex: 0,\n  quizData: {}, // { questionNumber: { question, options, response, ... } }\n  quizHistory: [], // Array of { questionNumber, section, question, options, response }\n};\n\nconst useQuizStore = create(\n  persist(\n    (set, get) => ({\n      ...DEFAULT_STATE,\n      setCurrentQuestionIndex: (index) => set({ currentQuestionIndex: index }),\n      addQuizData: (questionNumber, data) =>\n        set((state) => ({\n          quizData: { ...state.quizData, [questionNumber]: data },\n        })),\n      // Append a new entry to quizHistory.\n      addQuizHistory: (entry) =>\n        set((state) => ({\n          quizHistory: [...state.quizHistory, entry],\n        })),\n      // Update the existing entry for a given question number or add it if not present.\n      updateQuizHistory: (entry) =>\n        set((state) => {\n          const idx = state.quizHistory.findIndex(\n            (e) => e.questionNumber === entry.questionNumber\n          );\n          if (idx > -1) {\n            const newHistory = [...state.quizHistory];\n            newHistory[idx] = entry;\n            return { quizHistory: newHistory };\n          }\n          return { quizHistory: [...state.quizHistory, entry] };\n        }),\n      resetQuiz: () => set(DEFAULT_STATE),\n    }),\n    {\n      name: \"quiz-store\", // Key for localStorage persistence\n    }\n  )\n);\n\nexport default useQuizStore;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,gBAAgB;IACpB,sBAAsB;IACtB,UAAU,CAAC;IACX,aAAa,EAAE;AACjB;AAEA,MAAM,eAAe,CAAA,GAAA,2IAAA,CAAA,SAAM,AAAD,EACxB,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EACJ,CAAC,KAAK,MAAQ,CAAC;QACb,GAAG,aAAa;QAChB,yBAAyB,CAAC,QAAU,IAAI;gBAAE,sBAAsB;YAAM;QACtE,aAAa,CAAC,gBAAgB,OAC5B,IAAI,CAAC,QAAU,CAAC;oBACd,UAAU;wBAAE,GAAG,MAAM,QAAQ;wBAAE,CAAC,eAAe,EAAE;oBAAK;gBACxD,CAAC;QACH,qCAAqC;QACrC,gBAAgB,CAAC,QACf,IAAI,CAAC,QAAU,CAAC;oBACd,aAAa;2BAAI,MAAM,WAAW;wBAAE;qBAAM;gBAC5C,CAAC;QACH,kFAAkF;QAClF,mBAAmB,CAAC,QAClB,IAAI,CAAC;gBACH,MAAM,MAAM,MAAM,WAAW,CAAC,SAAS,CACrC,CAAC,IAAM,EAAE,cAAc,KAAK,MAAM,cAAc;gBAElD,IAAI,MAAM,CAAC,GAAG;oBACZ,MAAM,aAAa;2BAAI,MAAM,WAAW;qBAAC;oBACzC,UAAU,CAAC,IAAI,GAAG;oBAClB,OAAO;wBAAE,aAAa;oBAAW;gBACnC;gBACA,OAAO;oBAAE,aAAa;2BAAI,MAAM,WAAW;wBAAE;qBAAM;gBAAC;YACtD;QACF,WAAW,IAAM,IAAI;IACvB,CAAC,GACD;IACE,MAAM;AACR;uCAIW"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/sachin-crayon-d/Gen%20Ai%20Hackathon/task-evaluation-platform/src/app/page.js"],"sourcesContent":["\"use client\";\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardFooter,\n  Progress,\n  Textarea,\n  Chip,\n  Radio,\n  RadioGroup,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Spinner,\n  Slider,\n  Tooltip,\n} from \"@nextui-org/react\";\nimport {\n  Clock,\n  AlertCircle,\n  CheckCircle,\n  ArrowRight,\n  Info,\n  BrainCircuit,\n  Award,\n  RefreshCw,\n  RotateCcw,\n  Lightbulb,\n  Sparkles,\n  HelpCircle,\n  ListChecks,\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useRouter } from \"next/navigation\";\nimport confetti from \"canvas-confetti\";\nimport { useQuizStore } from \"../app/stores/quizStore\";\n\n// Constants\nconst TOTAL_QUESTIONS = 13;\nconst DEFAULT_TIMER_SECONDS = 10;\n\n// Section colors\nconst SECTION_COLORS = {\n  \"Task Complexity Assessment\": \"primary\",\n  \"Challenges & Solutions\": \"secondary\",\n  \"AI Assistance & Usage\": \"success\",\n  \"Technical Assessment\": \"warning\",\n};\n\n// Helper: Returns an icon based on the question section.\nconst SectionIcon = ({ section, size }) => {\n  switch (section) {\n    case \"Task Complexity Assessment\":\n      return <BrainCircuit size={size} />;\n    case \"Challenges & Solutions\":\n      return <Award size={size} />;\n    case \"AI Assistance & Usage\":\n      return <Sparkles size={size} />;\n    case \"Technical Assessment\":\n      return <Lightbulb size={size} />;\n    default:\n      return <Info size={size} />;\n  }\n};\n\n// Helper: For slider labels.\nconst getSliderLabel = (value) => {\n  if (value >= 1 && value <= 20) return \"Very Easy\";\n  if (value >= 21 && value <= 40) return \"Easy\";\n  if (value >= 41 && value <= 60) return \"Moderate\";\n  if (value >= 61 && value <= 80) return \"Challenging\";\n  if (value >= 81 && value <= 100) return \"Very Challenging\";\n  return \"-\";\n};\n\n// For question 8: map slider values (1-100) to integer labels (\"1\" to \"10\").\nconst getIntSliderLabel = (value) => {\n  return Math.ceil(value / 10).toString();\n};\n\n// Static questions configuration.\nconst staticQuestions = [\n  {\n    section: \"Task Complexity Assessment\",\n    question: \"How challenging was this task for you? (Scale 1-5)\",\n    inputType: \"slider\",\n    min: 1,\n    max: 100,\n    step: 1,\n    defaultValue: 50, // initial value set to 50 (Moderate)\n    labels: [\n      \"Very Easy\",\n      \"Easy\",\n      \"Moderate\",\n      \"Challenging\",\n      \"Very Challenging\",\n    ],\n    required: true,\n  },\n  {\n    section: \"Task Complexity Assessment\",\n    question: \"Which aspects were most complex?\",\n    inputType: \"text\",\n    placeholder: \"Describe the most complex aspects of this task...\",\n    required: true,\n  },\n  {\n    section: \"Task Complexity Assessment\",\n    question: \"What prior experience helped you?\",\n    inputType: \"text\",\n    placeholder: \"Share any relevant prior experience...\",\n    required: true,\n  },\n  {\n    section: \"Challenges & Solutions\",\n    question: \"What were your main technical challenges?\",\n    inputType: \"text\",\n    placeholder: \"Describe the technical challenges you faced...\",\n    required: true,\n  },\n  {\n    section: \"Challenges & Solutions\",\n    question: \"How did you overcome these challenges?\",\n    inputType: \"text\",\n    placeholder: \"Explain your approach to solving these challenges...\",\n    required: true,\n  },\n  {\n    section: \"AI Assistance & Usage\",\n    question:\n      \"Which AI tools did you use during development? (ChatGPT, Gemini, GitHub Copilot, etc.)\",\n    inputType: \"text\",\n    placeholder: \"List the AI tools you used...\",\n    required: true,\n  },\n  {\n    section: \"AI Assistance & Usage\",\n    question: \"How did you leverage these AI tools?\",\n    inputType: \"text\",\n    placeholder:\n      \"Describe how you used AI tools in your development process...\",\n    required: true,\n  },\n  {\n    section: \"AI Assistance & Usage\",\n    question:\n      \"On a scale of 1-10, how dependent was your solution on AI assistance?\",\n    inputType: \"slider\",\n    min: 1,\n    max: 100,\n    step: 1,\n    defaultValue: 50, // initial value set to 50 (maps to \"5\")\n    labels: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    required: true,\n  },\n];\n\nexport default function QuizPage() {\n  const router = useRouter();\n  const [sessionId] = useState(() =>\n    Math.random().toString(36).substring(2, 15)\n  );\n  // \"questions\" holds both static and dynamic questions.\n  const [questions, setQuestions] = useState(staticQuestions);\n  // A messages state for dynamic conversation (optional)\n  const [messages, setMessages] = useState([]);\n  const {\n    quizData,\n    addQuizData,\n    currentQuestionIndex,\n    setCurrentQuestionIndex,\n    timer,\n    setTimer,\n  } = useQuizStore();\n\n  // Other local UI states\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [textAnswer, setTextAnswer] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [sliderValue, setSliderValue] = useState(null);\n  const [isTimerActive, setIsTimerActive] = useState(true);\n  const [isTimerWarning, setIsTimerWarning] = useState(false);\n  const [validationError, setValidationError] = useState(\"\");\n  const [fadeAnimation, setFadeAnimation] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n  const [hint, setHint] = useState(\"\");\n  const [showReviewModal, setShowReviewModal] = useState(false);\n\n  // Compute progress\n  const progressPercentage = useMemo(\n    () => ((currentQuestionIndex + 1) / TOTAL_QUESTIONS) * 100,\n    [currentQuestionIndex]\n  );\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === TOTAL_QUESTIONS - 1;\n  const isQuestionRequired = currentQuestion?.required !== false;\n  const sectionColor = useMemo(\n    () => SECTION_COLORS[currentQuestion?.section] || \"primary\",\n    [currentQuestion]\n  );\n\n  // Determine input type\n  const getInputType = useCallback(() => {\n    if (!currentQuestion) return null;\n    return (\n      currentQuestion.inputType ||\n      (currentQuestion.options && currentQuestion.options.length > 0\n        ? \"radio\"\n        : \"text\")\n    );\n  }, [currentQuestion]);\n  const inputType = getInputType();\n\n  // Set initial slider value when question changes.\n  useEffect(() => {\n    if (\n      currentQuestion &&\n      inputType === \"slider\" &&\n      currentQuestion.defaultValue !== undefined\n    ) {\n      setSliderValue(currentQuestion.defaultValue);\n    } else {\n      setSliderValue(null);\n    }\n  }, [currentQuestionIndex, currentQuestion, inputType]);\n\n  // Countdown timer\n  useEffect(() => {\n    if (isTimerActive) {\n      const intervalId = setInterval(() => {\n        setTimer((prevTimer) => (prevTimer > 0 ? prevTimer - 1 : 0));\n      }, 1000);\n      return () => clearInterval(intervalId);\n    }\n  }, [isTimerActive, setTimer]);\n\n  // Timer warning when time is low.\n  useEffect(() => {\n    setIsTimerWarning(timer <= 3);\n  }, [timer]);\n\n  // Auto-submit answer when timer hits 0.\n  useEffect(() => {\n    if (timer === 0) {\n      setIsTimerActive(false);\n      handleNextQuestion(true);\n    }\n  }, [timer]);\n\n  // Reset UI state on question change.\n  useEffect(() => {\n    setTimer(DEFAULT_TIMER_SECONDS);\n    setIsTimerActive(true);\n    setIsTimerWarning(false);\n    setTextAnswer(\"\");\n    setSelectedOption(\"\");\n    setValidationError(\"\");\n    setShowHint(false);\n    setHint(\"\");\n    setFadeAnimation(true);\n    const timeout = setTimeout(() => {\n      setFadeAnimation(false);\n    }, 300);\n    return () => clearTimeout(timeout);\n  }, [currentQuestionIndex, setTimer]);\n\n  // *** CORE FUNCTIONALITY: Fetch dynamic question one by one ***\n  // If the currentQuestionIndex exceeds the stored questions, fetch a dynamic question.\n  useEffect(() => {\n    if (\n      currentQuestionIndex >= questions.length &&\n      currentQuestionIndex < TOTAL_QUESTIONS\n    ) {\n      setLoading(true);\n      fetchDynamicQuestion()\n        .then((dynamicQuestion) => {\n          setQuestions((prev) => [...prev, dynamicQuestion]);\n          setLoading(false);\n        })\n        .catch((err) => {\n          setError(`Failed to fetch dynamic question: ${err.message}`);\n          setLoading(false);\n        });\n    }\n  }, [currentQuestionIndex, questions]);\n\n  // Fetch dynamic question from API.\n  const fetchDynamicQuestion = async () => {\n    try {\n      const response = await fetch(\"/api/generateQuestion\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          previousQuestions: questions.map((q) => q.question),\n          sessionId,\n        }),\n      });\n      const data = await response.json();\n      if (!data || !data.question) {\n        throw new Error(\"Invalid question data received from API\");\n      }\n      return {\n        section: data.section || \"Technical Assessment\",\n        question: data.question,\n        inputType: data.inputType || \"text\",\n        placeholder: data.placeholder || \"Type your answer here...\",\n        options: data.options || undefined,\n        min: data.min,\n        max: data.max,\n        step: data.step || 1,\n        defaultValue: data.defaultValue,\n        labels: data.labels,\n        required: true,\n        hint: data.hint || \"\",\n      };\n    } catch (err) {\n      console.error(\"Error fetching dynamic question:\", err);\n      throw new Error(`Failed to fetch the next question: ${err.message}`);\n    }\n  };\n\n  // Handle moving to the next question.\n  // autoSubmit bypasses validation when timer expires.\n  const handleNextQuestion = async (autoSubmit = false) => {\n    if (!autoSubmit && !validateAnswer()) return;\n    setValidationError(\"\");\n    const currentAnswer = getCurrentAnswer();\n    // Save answer.\n    addQuizData(currentQuestionIndex + 1, {\n      questionNumber: currentQuestionIndex + 1,\n      question: currentQuestion.question,\n      ...(inputType === \"radio\" && { options: currentQuestion.options }),\n      ...(inputType === \"slider\" && { options: currentQuestion.labels }),\n      response: currentAnswer,\n    });\n    // For dynamic questions, also update messages.\n    if (currentQuestionIndex >= staticQuestions.length) {\n      setMessages((prev) => [\n        ...prev,\n        {\n          role: \"user\",\n          content: JSON.stringify({\n            question: currentQuestion.question,\n            options:\n              inputType === \"radio\"\n                ? currentQuestion.options\n                : inputType === \"slider\"\n                ? currentQuestion.labels\n                : undefined,\n            response: currentAnswer,\n          }),\n        },\n      ]);\n    }\n    const nextIndex = currentQuestionIndex + 1;\n    if (nextIndex < TOTAL_QUESTIONS) {\n      setCurrentQuestionIndex(nextIndex);\n    } else {\n      router.push(\"/results\");\n    }\n  };\n\n  // Handle finishing the quiz from the review modal.\n  const handleFinishQuiz = () => {\n    router.push(\"/results\");\n  };\n\n  // Get current answer based on input type.\n  const getCurrentAnswer = useCallback(() => {\n    switch (inputType) {\n      case \"radio\":\n        return selectedOption;\n      case \"slider\":\n        return sliderValue;\n      case \"text\":\n      default:\n        return textAnswer;\n    }\n  }, [inputType, selectedOption, sliderValue, textAnswer]);\n\n  // Validate the current answer.\n  const validateAnswer = useCallback(() => {\n    if (!currentQuestion) return false;\n    if (!isQuestionRequired) return true;\n    switch (inputType) {\n      case \"radio\":\n        if (!selectedOption) {\n          setValidationError(\"Please select an option to continue.\");\n          return false;\n        }\n        break;\n      case \"slider\":\n        if ([null, \"-\"].includes(sliderValue)) {\n          setValidationError(\"Please select a value on the scale.\");\n          return false;\n        }\n        break;\n      case \"text\":\n      default:\n        if (!textAnswer.trim()) {\n          setValidationError(\"Please provide an answer to continue.\");\n          return false;\n        }\n        if (textAnswer.trim().length < 2) {\n          setValidationError(\n            \"Your answer is too short. Please provide more details.\"\n          );\n          return false;\n        }\n        break;\n    }\n    return true;\n  }, [\n    currentQuestion,\n    inputType,\n    selectedOption,\n    sliderValue,\n    textAnswer,\n    isQuestionRequired,\n  ]);\n\n  const formatTime = (seconds) => {\n    const sec = Number(seconds);\n    if (isNaN(sec)) return \"0:00\";\n    if (sec < 60) return `${sec}s`;\n    const minutes = Math.floor(sec / 60);\n    const remainingSeconds = sec % 60;\n    return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\n  };\n\n  // Render slider labels below the slider.\n  const renderSliderLabels = () => {\n    if (!currentQuestion || !currentQuestion.labels) return null;\n    return (\n      <div className=\"flex justify-between w-full mt-2 px-2\">\n        {currentQuestion.labels.map((label, index) => {\n          const displayText = label.includes(\" - \")\n            ? label.split(\" - \")[1]\n            : label;\n          return (\n            <div\n              key={index}\n              className=\"text-xs text-gray-600 text-center\"\n              style={{ width: `${100 / currentQuestion.labels.length}%` }}\n            >\n              {displayText}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // Toggle hint display.\n  const toggleHint = () => {\n    if (!showHint && currentQuestion?.hint) {\n      setHint(currentQuestion.hint || \"No hint available for this question.\");\n    }\n    setShowHint(!showHint);\n  };\n\n  // Trigger confetti effect.\n  const triggerConfetti = () => {\n    if (typeof window !== \"undefined\" && confetti) {\n      const end = Date.now() + 1500;\n      const colors = [\"#4CAF50\", \"#2196F3\", \"#FFC107\", \"#9C27B0\"];\n      (function frame() {\n        confetti({\n          particleCount: 3,\n          angle: 60,\n          spread: 55,\n          origin: { x: 0 },\n          colors: colors,\n        });\n        confetti({\n          particleCount: 3,\n          angle: 120,\n          spread: 55,\n          origin: { x: 1 },\n          colors: colors,\n        });\n        if (Date.now() < end) {\n          requestAnimationFrame(frame);\n        }\n      })();\n    }\n  };\n\n  // Render input component based on question type.\n  const renderQuestionInput = () => {\n    if (!currentQuestion) return null;\n    switch (inputType) {\n      case \"radio\":\n        return (\n          <RadioGroup\n            value={selectedOption}\n            onValueChange={(value) => {\n              setSelectedOption(value);\n              setValidationError(\"\");\n            }}\n            className=\"gap-3\"\n            orientation=\"vertical\"\n          >\n            {currentQuestion.options.map((option, index) => (\n              <Radio\n                key={index}\n                value={option}\n                description={\n                  option.includes(\" - \") ? option.split(\" - \")[1] : null\n                }\n                classNames={{\n                  base: \"border border-gray-200 rounded-lg p-3 hover:bg-gray-50 transition-transform duration-150 transform hover:scale-105\",\n                }}\n              >\n                {option.includes(\" - \") ? option.split(\" - \")[0] : option}\n              </Radio>\n            ))}\n          </RadioGroup>\n        );\n      case \"slider\":\n        return (\n          <div className=\"w-full\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                {currentQuestion.min}\n              </span>\n              <span className=\"text-lg font-bold text-primary\">\n                {sliderValue !== null && currentQuestion.labels\n                  ? currentQuestionIndex + 1 === 8\n                    ? getIntSliderLabel(sliderValue)\n                    : getSliderLabel(sliderValue)\n                  : \"-\"}\n              </span>\n              <span className=\"text-sm font-medium text-gray-700\">\n                {currentQuestion.max}\n              </span>\n            </div>\n            <Slider\n              aria-labelledby={`question-${currentQuestionIndex + 1}`}\n              step={currentQuestion.step || 1}\n              min={currentQuestion.min}\n              max={currentQuestion.max}\n              defaultValue={currentQuestion.defaultValue}\n              value={sliderValue}\n              onChange={(value) => {\n                setSliderValue(value);\n                setValidationError(\"\");\n              }}\n              className=\"w-full\"\n              color={sectionColor}\n              size=\"lg\"\n              classNames={{\n                base: \"w-full\",\n                track: \"h-2 bg-gray-300 rounded-full\",\n                indicator:\n                  \"rounded-full bg-gradient-to-r from-blue-500 to-blue-700\",\n                thumb:\n                  \"w-6 h-6 shadow-lg active:scale-125 transition-transform duration-200 bg-current\",\n              }}\n              marks={currentQuestion.labels?.map((label, index) => {\n                const value =\n                  currentQuestion.min +\n                  index *\n                    ((currentQuestion.max - currentQuestion.min) /\n                      (currentQuestion.labels.length - 1));\n                return { value };\n              })}\n            />\n            {renderSliderLabels()}\n          </div>\n        );\n      case \"text\":\n      default:\n        return (\n          <Textarea\n            aria-labelledby={`question-${currentQuestionIndex + 1}`}\n            placeholder={\n              currentQuestion.placeholder || \"Type your answer here...\"\n            }\n            value={textAnswer}\n            onChange={(e) => {\n              setTextAnswer(e.target.value);\n              setValidationError(\"\");\n            }}\n            minRows={5}\n            maxRows={10}\n            className=\"w-full\"\n            classNames={{\n              input:\n                \"resize-y focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\",\n              base: \"border-gray-300 hover:border-gray-400 transition-colors duration-200\",\n            }}\n          />\n        );\n    }\n  };\n\n  // Loading UI\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-6\">\n        <div className=\"text-center bg-white p-8 rounded-xl shadow-lg transform transition-all duration-500 hover:shadow-2xl\">\n          <Spinner color=\"primary\" size=\"lg\" />\n          <p className=\"mt-4 text-lg font-medium text-gray-700 animate-pulse\">\n            {currentQuestionIndex >= staticQuestions.length\n              ? \"Fetching your next question...\"\n              : \"Preparing your next question...\"}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Error UI\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-6\">\n        <Card className=\"max-w-md w-full shadow-xl transform transition-all duration-500 hover:scale-105\">\n          <CardHeader className=\"flex flex-col gap-1 items-center bg-red-50 text-red-700 border-b border-red-200\">\n            <AlertCircle size={40} className=\"text-red-600\" />\n            <h2 className=\"text-xl font-bold mt-2\">Error Occurred</h2>\n          </CardHeader>\n          <CardBody className=\"text-center py-6\">\n            <p className=\"mb-4 text-gray-800\">{error}</p>\n            <Button\n              color=\"primary\"\n              onClick={() => setError(null)}\n              startContent={<RefreshCw size={18} />}\n              className=\"bg-gradient-to-r from-blue-600 to-blue-800 shadow-md hover:shadow-lg transition-all duration-200\"\n            >\n              Try Again\n            </Button>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n  // Main quiz UI\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-6 pb-12\">\n      <header className=\"w-full max-w-3xl mb-8 text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Crayon Gen-AI Internship Test\n        </h1>\n        <p className=\"text-gray-600\">Test your skills and understanding.</p>\n      </header>\n\n      {/* Quiz Progress */}\n      <div className=\"w-full max-w-3xl mb-6\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <span className=\"text-sm font-medium text-gray-700\">\n            Progress: {Math.round(progressPercentage)}%\n          </span>\n          <span className=\"text-sm font-medium text-gray-700\">\n            Question {currentQuestionIndex + 1} of {TOTAL_QUESTIONS}\n          </span>\n        </div>\n        <Progress\n          value={progressPercentage}\n          color={sectionColor}\n          size=\"md\"\n          radius=\"full\"\n          showValueLabel={false}\n          aria-label=\"Quiz progress\"\n          className=\"h-2\"\n          classNames={{\n            track: \"rounded-full bg-gray-200\",\n            indicator: `rounded-full bg-gradient-to-r from-${sectionColor}-500 to-${sectionColor}-700`,\n          }}\n        />\n      </div>\n\n      {/* Quiz Card */}\n      <Card className=\"max-w-3xl w-full bg-white shadow-xl rounded-xl overflow-hidden border border-gray-200\">\n        <CardHeader className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center border-b border-gray-200 bg-gray-50 px-6 py-5\">\n          <div className=\"flex items-center gap-3 mb-2 sm:mb-0\">\n            <Chip\n              color={sectionColor}\n              variant=\"flat\"\n              radius=\"sm\"\n              size=\"md\"\n              className=\"font-semibold\"\n              startContent={\n                <SectionIcon section={currentQuestion?.section} size={20} />\n              }\n            >\n              {currentQuestion?.section || \"Question\"}\n            </Chip>\n          </div>\n          <div\n            className=\"flex items-center gap-2 text-gray-600\"\n            title=\"Time remaining to answer this question\"\n          >\n            <Clock\n              size={18}\n              className={isTimerWarning ? \"text-red-500 animate-pulse\" : \"\"}\n            />\n            <span\n              className={`font-mono text-sm ${\n                isTimerWarning ? \"text-red-500 animate-pulse\" : \"\"\n              }`}\n            >\n              {formatTime(timer)}\n            </span>\n          </div>\n        </CardHeader>\n        <CardBody className=\"py-6 px-6\">\n          <motion.h3\n            layout\n            className=\"text-xl sm:text-2xl font-semibold text-gray-900 mb-5\"\n          >\n            {currentQuestion?.question}\n          </motion.h3>\n          {validationError && (\n            <motion.div\n              layout\n              className=\"mb-5 p-4 bg-red-50 text-red-700 rounded-md flex items-center gap-2 border border-red-200\"\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2 }}\n            >\n              <AlertCircle size={18} />\n              <span>{validationError}</span>\n            </motion.div>\n          )}\n          <motion.div layout>{renderQuestionInput()}</motion.div>\n          {currentQuestion.hint && (\n            <div className=\"mt-6\">\n              <Tooltip\n                content={<div className=\"text-sm\">{hint}</div>}\n                placement=\"bottom\"\n              >\n                <Button\n                  size=\"sm\"\n                  color=\"warning\"\n                  variant=\"flat\"\n                  isIconOnly\n                  aria-label=\"Show hint\"\n                  className=\"min-w-[40px] h-[40px] p-0\"\n                  onPress={toggleHint}\n                >\n                  <HelpCircle size={20} />\n                </Button>\n              </Tooltip>\n            </div>\n          )}\n        </CardBody>\n        <CardFooter className=\"flex flex-col sm:flex-row justify-between border-t border-gray-200 px-6 py-5\">\n          <div\n            className=\"flex items-center text-sm text-gray-500\"\n            title=\"Enter a thoughtful response before continuing\"\n          >\n            <div className=\"flex items-center gap-1\">\n              <Info size={16} />\n              <span>\n                {isLastQuestion\n                  ? \"This is the final question\"\n                  : \"Answer thoughtfully\"}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex gap-3 mt-3 sm:mt-0\">\n            <Button\n              color=\"primary\"\n              endContent={\n                isLastQuestion ? (\n                  <ListChecks size={18} />\n                ) : (\n                  <ArrowRight size={18} />\n                )\n              }\n              onClick={() => handleNextQuestion()}\n              isDisabled={\n                isQuestionRequired &&\n                ((inputType === \"radio\" && !selectedOption) ||\n                  (inputType === \"text\" && !textAnswer.trim()) ||\n                  (inputType === \"slider\" && sliderValue === null))\n              }\n              size=\"lg\"\n            >\n              {isLastQuestion ? \"Review & Finish\" : \"Next Question\"}\n            </Button>\n          </div>\n        </CardFooter>\n      </Card>\n\n      {/* Review Answers Modal */}\n      <Modal\n        isOpen={showReviewModal}\n        onClose={() => setShowReviewModal(false)}\n        size=\"lg\"\n        scrollBehavior=\"inside\"\n        className=\"bg-white rounded-xl shadow-2xl\"\n        backdrop=\"blur\"\n      >\n        <ModalContent>\n          <ModalHeader className=\"flex flex-col gap-1\">\n            <h3 className=\"text-xl font-semibold text-center\">\n              Review Your Answers\n            </h3>\n            <p className=\"text-sm text-gray-600 text-center\">\n              Please review your responses before submitting the quiz.\n            </p>\n          </ModalHeader>\n          <ModalBody className=\"px-6 py-4\">\n            {questions.map((q, index) => (\n              <div\n                key={index}\n                className=\"mb-6 p-4 rounded-lg border border-gray-200 bg-gray-50\"\n              >\n                <h4 className=\"font-semibold text-lg text-gray-800 mb-3\">\n                  Question {index + 1}: {q.question}\n                </h4>\n                <p className=\"text-gray-700\">\n                  <strong>Your Answer:</strong>{\" \"}\n                  {(quizData[index + 1] && quizData[index + 1].response) ||\n                    \"No answer provided\"}\n                </p>\n              </div>\n            ))}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"default\"\n              variant=\"flat\"\n              onPress={() => setShowReviewModal(false)}\n            >\n              Back to Edit\n            </Button>\n            <Button\n              color=\"primary\"\n              onPress={handleFinishQuiz}\n              endContent={<CheckCircle size={18} />}\n            >\n              Finish Quiz\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1368, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}