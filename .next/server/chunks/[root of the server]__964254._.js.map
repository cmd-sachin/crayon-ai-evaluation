{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://D%3A/ai-eva-crayon/crayon-ai-evaluation/src/app/api/airtable/data/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport Airtable from \"airtable\";\r\n\r\nconst base = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(\r\n  process.env.AIRTABLE_BASE_ID\r\n);\r\nconst TABLE_NAME = \"Task\";\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const { taskid } = await request.json();\r\n\r\n    const records = await base(TABLE_NAME)\r\n      .select({\r\n        filterByFormula: `{taskId} = '${taskid}'`,\r\n        maxRecords: 1,\r\n      })\r\n      .firstPage();\r\n\r\n    if (!records || records.length === 0) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Email not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const record = records[0];\r\n    const storedKey = record.get(\"key\");\r\n    const taskID = record.get(\"taskId\");\r\n    console.log(records[0]);\r\n    const formatedData = {\r\n      description: record.get(\"description\"),\r\n      title: record.get(\"title\"),\r\n      taskId: record.get(\"taskId\"),\r\n      resources: record.get(\"resources\"),\r\n    };\r\n    const formatedData1 = JSON.stringify(formatedData);\r\n\r\n    if (taskID === taskid) {\r\n      return NextResponse.json({ success: true, formatedData });\r\n    } else {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Key does not match\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in POST /login:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: error.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,OAAO,IAAI,6IAAA,CAAA,UAAQ,CAAC;IAAE,QAAQ,QAAQ,GAAG,CAAC,gBAAgB;AAAC,GAAG,IAAI,CACtE,QAAQ,GAAG,CAAC,gBAAgB;AAE9B,MAAM,aAAa;AAEZ,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErC,MAAM,UAAU,MAAM,KAAK,YACxB,MAAM,CAAC;YACN,iBAAiB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;YACzC,YAAY;QACd,GACC,SAAS;QAEZ,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAkB,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,OAAO,CAAC,EAAE;QACzB,MAAM,YAAY,OAAO,GAAG,CAAC;QAC7B,MAAM,SAAS,OAAO,GAAG,CAAC;QAC1B,QAAQ,GAAG,CAAC,OAAO,CAAC,EAAE;QACtB,MAAM,eAAe;YACnB,aAAa,OAAO,GAAG,CAAC;YACxB,OAAO,OAAO,GAAG,CAAC;YAClB,QAAQ,OAAO,GAAG,CAAC;YACnB,WAAW,OAAO,GAAG,CAAC;QACxB;QACA,MAAM,gBAAgB,KAAK,SAAS,CAAC;QAErC,IAAI,WAAW,QAAQ;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM;YAAa;QACzD,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAqB,GAChD;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS,MAAM,OAAO;QAAC,GACzC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}