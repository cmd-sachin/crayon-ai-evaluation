{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/sachin-crayon-d/Gen%20Ai%20Hackathon/task-evaluation-platform/src/app/prompts/generateQuestions.js"],"sourcesContent":["const systemPrompt = `# Instant Question Generator From The Given Source\n\n## Persona\n- You're an expert assistant in generating questions from the given source and specified aspect.\n\n## Roles & Responsibilities:\n\n### Scenario\nA user submits their work, which might be a **Project, Assignment, or Task**.\n    - Examples include **Code (Programs), Documents, Videos (Base64 format),** etc.\n\n### Role    \nYou're responsible for verifying whether the submitted **project/assignment/task** was completed genuinely by generating **n unique questions** based **only on the given source**.\n\n### Responsibilities\n- **Generate n unique questions one by one.**\n- **Ensure each question is strictly derived from the provided source file.**\n- **Avoid any repetition of questions.**\n\n## Rules & Guidelines\n\n### Question Types\nThe **n questions** should be a **random mix** of the following:\n- **MCQs** (Multiple Choice Questions with **4 options**)\n- **Fill in the blanks** (No options required)\n- **Complete the incomplete code snippet**\n- **Explain the code snippet**\n- **True/False** (Two options: True/False) (Only One True/False)\n\n### Rules\n- Generate **questions one by one**.\n- **No repetition** of questions.\n- Questions should be **strictly based on the provided source**.\n- **Avoid sensitive information** (e.g., apiKeys, secretKeys, credentials, etc.).\n- Maintain an **Intermediate level of difficulty** (avoid overly simple questions).\n- **No irrelevant or silly questions.**\n\n## Output Requirements\n\n### Structure \n'''json\n{\n  \"question\": \"What does this function return?\",\n  \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"] // Only for MCQs\n}\n'''\n\n## Remember Notes\n- **Generate one question at a time.**\n- If **options aren't required**, provide [] or omit the options field.\n- **No duplicate questions.**\n- Ensure a **variety of question types that includes MCQ's , Fillups, Completing partial code snippet**.\n- Strictly **follow the rules and output structure**.`;\n\nexport default systemPrompt;\n"],"names":[],"mappings":";;;AAAA,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAoD+B,CAAC;uCAEvC"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/sachin-crayon-d/Gen%20Ai%20Hackathon/task-evaluation-platform/src/app/api/generateQuestion/route.js"],"sourcesContent":["import { generateObject } from \"ai\";\nimport { createGoogleGenerativeAI } from \"@ai-sdk/google\";\nimport systemPrompt from \"../../prompts/generateQuestions\";\nimport z from \"zod\";\n\nconst google = createGoogleGenerativeAI({ apiKey: process.env.API_KEY });\n\nexport async function POST(req) {\n  try {\n    const { messages } = await req.json();\n\n    const result = await generateObject({\n      model: google(\"gemini-2.0-flash-exp\"),\n      system: systemPrompt,\n      schema: z.object({\n        question: z.string(),\n        options: z.array(z.string()).optional(),\n      }),\n      messages: messages,\n    });\n    console.log(messages);\n    return new Response(JSON.stringify(result.object));\n  } catch (error) {\n    console.error(\"Error in generateQuestion API:\", error);\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n    });\n  }\n}\n"],"names":[],"mappings":";;;AAEA;AADA;AADA;AAGA;;;;;AAEA,MAAM,SAAS,CAAA,GAAA,yJAAA,CAAA,2BAAwB,AAAD,EAAE;IAAE,QAAQ,QAAQ,GAAG,CAAC,OAAO;AAAC;AAE/D,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,MAAM,SAAS,MAAM,CAAA,GAAA,sJAAA,CAAA,iBAAc,AAAD,EAAE;YAClC,OAAO,OAAO;YACd,QAAQ,4IAAA,CAAA,UAAY;YACpB,QAAQ,sIAAA,CAAA,UAAC,CAAC,MAAM,CAAC;gBACf,UAAU,sIAAA,CAAA,UAAC,CAAC,MAAM;gBAClB,SAAS,sIAAA,CAAA,UAAC,CAAC,KAAK,CAAC,sIAAA,CAAA,UAAC,CAAC,MAAM,IAAI,QAAQ;YACvC;YACA,UAAU;QACZ;QACA,QAAQ,GAAG,CAAC;QACZ,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,OAAO,MAAM;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,IAAI;YAC5D,QAAQ;QACV;IACF;AACF"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}