{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/sachin-crayon-d/Gen%20Ai%20Hackathon/task-evaluation-platform/src/app/page.js"],"sourcesContent":["\"use client\";\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardFooter,\n  Progress,\n  Textarea,\n  Chip,\n  Radio,\n  RadioGroup,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Spinner,\n  Slider,\n  Tooltip,\n  Divider,\n} from \"@nextui-org/react\";\nimport {\n  Clock,\n  AlertCircle,\n  CheckCircle,\n  ArrowRight,\n  Info,\n  BrainCircuit,\n  Award,\n  RefreshCw,\n  RotateCcw,\n  Lightbulb,\n  Sparkles,\n  HelpCircle,\n  ListChecks,\n} from \"lucide-react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport confetti from \"canvas-confetti\";\n\n// Global constant for section colors\nconst SECTION_COLORS = {\n  \"Task Complexity Assessment\": \"primary\",\n  \"Challenges & Solutions\": \"secondary\",\n  \"AI Assistance & Usage\": \"success\",\n  \"Technical Assessment\": \"warning\",\n};\n\n// Helper: SectionIcon returns an icon based on the question section.\nconst SectionIcon = ({ section, size }) => {\n  switch (section) {\n    case \"Task Complexity Assessment\":\n      return <BrainCircuit size={size} />;\n    case \"Challenges & Solutions\":\n      return <Award size={size} />;\n    case \"AI Assistance & Usage\":\n      return <Sparkles size={size} />;\n    case \"Technical Assessment\":\n      return <Lightbulb size={size} />;\n    default:\n      return <Info size={size} />;\n  }\n};\n\n// Helper: For sliders that use descriptive labels (e.g. \"Very Easy\", etc.)\nconst getSliderLabel = (value) => {\n  if (value >= 1 && value <= 20) return \"Very Easy\";\n  if (value >= 21 && value <= 40) return \"Easy\";\n  if (value >= 41 && value <= 60) return \"Moderate\";\n  if (value >= 61 && value <= 80) return \"Challenging\";\n  if (value >= 81 && value <= 100) return \"Very Challenging\";\n  return \"-\";\n};\n\n// Helper: For q8: map slider values (1-100) to integer labels (\"1\" to \"10\")\nconst getIntSliderLabel = (value) => {\n  return Math.ceil(value / 10).toString();\n};\n\n// Static questions configuration â€“ all questions are required.\nconst staticQuestions = [\n  {\n    id: \"q1\",\n    section: \"Task Complexity Assessment\",\n    question: \"How challenging was this task for you? (Scale 1-5)\",\n    inputType: \"slider\",\n    min: 1,\n    max: 100,\n    step: 1,\n    defaultValue: 0, // maps to \"Very Easy\"\n    labels: [\n      \"Very Easy\",\n      \"Easy\",\n      \"Moderate\",\n      \"Challenging\",\n      \"Very Challenging\",\n    ],\n    required: true,\n  },\n  {\n    id: \"q2\",\n    section: \"Task Complexity Assessment\",\n    question: \"Which aspects were most complex?\",\n    inputType: \"text\",\n    placeholder: \"Describe the most complex aspects of this task...\",\n    required: true,\n  },\n  {\n    id: \"q3\",\n    section: \"Task Complexity Assessment\",\n    question: \"What prior experience helped you?\",\n    inputType: \"text\",\n    placeholder: \"Share any relevant prior experience...\",\n    required: true,\n  },\n  {\n    id: \"q4\",\n    section: \"Challenges & Solutions\",\n    question: \"What were your main technical challenges?\",\n    inputType: \"text\",\n    placeholder: \"Describe the technical challenges you faced...\",\n    required: true,\n  },\n  {\n    id: \"q5\",\n    section: \"Challenges & Solutions\",\n    question: \"How did you overcome these challenges?\",\n    inputType: \"text\",\n    placeholder: \"Explain your approach to solving these challenges...\",\n    required: true,\n  },\n  {\n    id: \"q6\",\n    section: \"AI Assistance & Usage\",\n    question:\n      \"Which AI tools did you use during development? (ChatGPT, Gemini, GitHub Copilot, etc.)\",\n    inputType: \"text\",\n    placeholder: \"List the AI tools you used...\",\n    required: true,\n  },\n  {\n    id: \"q7\",\n    section: \"AI Assistance & Usage\",\n    question: \"How did you leverage these AI tools?\",\n    inputType: \"text\",\n    placeholder:\n      \"Describe how you used AI tools in your development process...\",\n    required: true,\n  },\n  {\n    id: \"q8\",\n    section: \"AI Assistance & Usage\",\n    question:\n      \"On a scale of 1-10, how dependent was your solution on AI assistance?\",\n    inputType: \"slider\",\n    min: 1,\n    max: 100,\n    step: 1,\n    defaultValue: 0, // default maps to \"5\"\n    labels: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    required: true,\n  },\n];\n\nexport default function QuizPage() {\n  // Constants\n  const TOTAL_QUESTIONS = 13;\n  const DEFAULT_TIMER_SECONDS = 10;\n  const ANIMATION_DELAY = 2000;\n  const API_TIMEOUT = 30000;\n\n  // State management\n  const [sessionId, setSessionId] = useState(\"unknown\");\n  const [questions, setQuestions] = useState(staticQuestions);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [textAnswer, setTextAnswer] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [sliderValue, setSliderValue] = useState(null);\n  const [timer, setTimer] = useState(DEFAULT_TIMER_SECONDS);\n  const [isTimerActive, setIsTimerActive] = useState(true);\n  const [isTimerWarning, setIsTimerWarning] = useState(false);\n  const [answers, setAnswers] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [validationError, setValidationError] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState(\"\");\n  const [processingProgress, setProcessingProgress] = useState(0);\n  const [analysisResults, setAnalysisResults] = useState({});\n  const [showProcessingModal, setShowProcessingModal] = useState(false);\n  const [fadeAnimation, setFadeAnimation] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n  const [hint, setHint] = useState(\"\");\n  const [showReviewModal, setShowReviewModal] = useState(false);\n\n  // Computed values\n  const progressPercentage = useMemo(\n    () => ((currentQuestionIndex + 1) / TOTAL_QUESTIONS) * 100,\n    [currentQuestionIndex]\n  );\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === TOTAL_QUESTIONS - 1;\n  const isQuestionRequired = currentQuestion?.required !== false;\n  const sectionColor = useMemo(\n    () => SECTION_COLORS[currentQuestion?.section] || \"primary\",\n    [currentQuestion]\n  );\n\n  // Determine the input type\n  const getInputType = useCallback(() => {\n    if (!currentQuestion) return null;\n    return (\n      currentQuestion.inputType ||\n      (currentQuestion.options && currentQuestion.options.length > 0\n        ? \"radio\"\n        : \"text\")\n    );\n  }, [currentQuestion]);\n  const inputType = getInputType();\n\n  // Load sessionId from localStorage on mount\n  useEffect(() => {\n    const storedId = localStorage.getItem(\"sessionId\") || `quiz-${Date.now()}`;\n    setSessionId(storedId);\n    if (!localStorage.getItem(\"sessionId\")) {\n      localStorage.setItem(\"sessionId\", storedId);\n    }\n  }, []);\n\n  // Set initial slider value when question changes\n  useEffect(() => {\n    if (\n      currentQuestion &&\n      inputType === \"slider\" &&\n      currentQuestion.defaultValue !== undefined\n    ) {\n      setSliderValue(currentQuestion.defaultValue);\n    } else {\n      setSliderValue(null);\n    }\n  }, [currentQuestionIndex, currentQuestion, inputType]);\n\n  // Timer functionality\n  useEffect(() => {\n    let interval = null;\n    if (isTimerActive && timer > 0) {\n      interval = setInterval(() => {\n        setTimer((prev) => {\n          const newValue = prev - 1;\n          if (newValue <= 10 && newValue > 0) {\n            setIsTimerWarning(true);\n          }\n          return newValue;\n        });\n      }, 1000);\n    } else if (timer === 0) {\n      setIsTimerActive(false);\n      const hasValidAnswer =\n        (inputType === \"radio\" && selectedOption) ||\n        (inputType === \"text\" && textAnswer.trim()) ||\n        (inputType === \"slider\" && sliderValue !== null);\n      if (hasValidAnswer) {\n        handleNextQuestion();\n      }\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [\n    timer,\n    isTimerActive,\n    inputType,\n    selectedOption,\n    textAnswer,\n    sliderValue,\n  ]);\n\n  // Reset state when question changes\n  useEffect(() => {\n    setTimer(DEFAULT_TIMER_SECONDS);\n    setIsTimerActive(true);\n    setIsTimerWarning(false);\n    setTextAnswer(\"\");\n    setSelectedOption(\"\");\n    setValidationError(\"\");\n    setShowHint(false);\n    setHint(\"\");\n    setFadeAnimation(true);\n    const timeout = setTimeout(() => {\n      setFadeAnimation(false);\n    }, 300);\n    return () => clearTimeout(timeout);\n  }, [currentQuestionIndex]);\n\n  // Fetch dynamic question from API\n  const fetchDynamicQuestion = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetchWithTimeout(\"/api/generateQuestion\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          messages,\n          previousQuestions: questions.map((q) => q.question),\n          sessionId,\n        }),\n      });\n      if (!response || !response.question) {\n        throw new Error(\"Invalid question data received from API\");\n      }\n      let newInputType = \"text\";\n      let additionalProps = {\n        placeholder: response.placeholder || \"Type your answer here...\",\n      };\n      if (response.options && response.options.length > 0) {\n        const isScalingQuestion = response.options.every(\n          (opt) =>\n            !isNaN(parseInt(opt)) ||\n            (!isNaN(parseInt(opt.split(\" - \")[0])) && opt.includes(\" - \"))\n        );\n        if (isScalingQuestion) {\n          newInputType = \"slider\";\n          let min, max, labels;\n          if (response.options[0].includes(\" - \")) {\n            min = parseInt(response.options[0].split(\" - \")[0]);\n            max = parseInt(\n              response.options[response.options.length - 1].split(\" - \")[0]\n            );\n            labels = response.options;\n          } else {\n            min = parseInt(response.options[0]);\n            max = parseInt(response.options[response.options.length - 1]);\n            labels = response.options;\n          }\n          additionalProps = {\n            min,\n            max,\n            step: 1,\n            defaultValue: Math.floor((min + max) / 2),\n            labels,\n          };\n        } else {\n          newInputType = \"radio\";\n          additionalProps = { options: response.options };\n        }\n      }\n      const questionData = {\n        id: `q${\n          staticQuestions.length + messages.length - staticQuestions.length + 1\n        }`,\n        section: response.section || \"Technical Assessment\",\n        question: response.question,\n        inputType: newInputType,\n        ...additionalProps,\n        required: true,\n        hint: response.hint || \"\",\n      };\n      setLoading(false);\n      return questionData;\n    } catch (err) {\n      setLoading(false);\n      setError(`Failed to fetch the next question: ${err.message}`);\n      console.error(\"Error fetching dynamic question:\", err);\n      return null;\n    }\n  };\n\n  // Process final analysis by calling multiple APIs\n  const processFinalAnalysis = async (finalAnswers, messageHistory) => {\n    setIsProcessing(true);\n    setShowProcessingModal(true);\n    setProcessingProgress(0);\n    try {\n      setProcessingStatus(\"Submitting quiz responses...\");\n      await submitQuizData(finalAnswers, messageHistory);\n      setProcessingProgress(20);\n      setProcessingStatus(\"Evaluating responses...\");\n      const evaluateResponsesResult = await fetchWithTimeout(\n        \"/api/evaluateResponses\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ messages: messageHistory, sessionId }),\n        }\n      );\n      setAnalysisResults((prev) => ({\n        ...prev,\n        evaluateResponses: evaluateResponsesResult,\n      }));\n      setProcessingProgress(40);\n      setProcessingStatus(\"Analyzing code submissions...\");\n      const codeAnalysisResult = await fetchWithTimeout(\"/api/codeAnalysis\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ answers: finalAnswers, sessionId }),\n      });\n      setAnalysisResults((prev) => ({\n        ...prev,\n        codeAnalysis: codeAnalysisResult,\n      }));\n      setProcessingProgress(60);\n      setProcessingStatus(\"Analyzing screen recordings...\");\n      const screenRecordingAnalysisResult = await fetchWithTimeout(\n        \"/api/screenRecordingAnalysis\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ answers: finalAnswers, sessionId }),\n        }\n      );\n      setAnalysisResults((prev) => ({\n        ...prev,\n        screenRecordingAnalysis: screenRecordingAnalysisResult,\n      }));\n      setProcessingProgress(80);\n      setProcessingStatus(\"Generating comprehensive analysis...\");\n      const finalAnalysisResult = await fetchWithTimeout(\"/api/finalAnalysis\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          responses: evaluateResponsesResult,\n          codeAnalysis: codeAnalysisResult,\n          screenRecordingAnalysis: screenRecordingAnalysisResult,\n          sessionId,\n        }),\n      });\n      setAnalysisResults((prev) => ({\n        ...prev,\n        finalAnalysis: finalAnalysisResult,\n      }));\n      setProcessingProgress(100);\n      setProcessingStatus(\"Analysis complete!\");\n      triggerConfetti();\n      setTimeout(() => {\n        setIsProcessing(false);\n        setShowProcessingModal(false);\n        window.location.href = \"/results\";\n      }, ANIMATION_DELAY);\n    } catch (err) {\n      console.error(\"Error processing final analysis:\", err);\n      setProcessingStatus(`Error: ${err.message}. Please try again.`);\n      setIsProcessing(false);\n    }\n  };\n\n  // Utility function for fetching with timeout protection\n  const fetchWithTimeout = async (url, options, timeout = API_TIMEOUT) => {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`API error: ${response.status} ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (err) {\n      clearTimeout(timeoutId);\n      if (err.name === \"AbortError\") {\n        throw new Error(\"Request timed out. Please try again.\");\n      }\n      throw err;\n    }\n  };\n\n  // Get the current answer based on input type\n  const getCurrentAnswer = useCallback(() => {\n    switch (inputType) {\n      case \"radio\":\n        return selectedOption;\n      case \"slider\":\n        return sliderValue;\n      case \"text\":\n      default:\n        return textAnswer;\n    }\n  }, [inputType, selectedOption, sliderValue, textAnswer]);\n\n  // Validate the current answer\n  const validateAnswer = useCallback(() => {\n    if (!currentQuestion) return false;\n    if (!isQuestionRequired) return true;\n    switch (inputType) {\n      case \"radio\":\n        if (!selectedOption) {\n          setValidationError(\"Please select an option to continue.\");\n          return false;\n        }\n        break;\n      case \"slider\":\n        if (sliderValue === null) {\n          setValidationError(\"Please select a value on the scale.\");\n          return false;\n        }\n        break;\n      case \"text\":\n      default:\n        if (!textAnswer.trim()) {\n          setValidationError(\"Please provide an answer to continue.\");\n          return false;\n        }\n        if (textAnswer.trim().length < 2) {\n          setValidationError(\n            \"Your answer is too short. Please provide more details.\"\n          );\n          return false;\n        }\n        break;\n    }\n    return true;\n  }, [\n    currentQuestion,\n    inputType,\n    selectedOption,\n    sliderValue,\n    textAnswer,\n    isQuestionRequired,\n  ]);\n\n  // Handle moving to next question or finishing the quiz\n  const handleNextQuestion = async () => {\n    if (!validateAnswer()) return;\n    setValidationError(\"\");\n    const currentAnswer = getCurrentAnswer();\n    setAnswers((prev) => ({\n      ...prev,\n      [currentQuestion.id]: currentAnswer,\n    }));\n\n    // Build the message content.\n    // For generic (static) questions (first 8), include only QuestionNumber, Question, Options, and Response.\n    // For dynamic questions, include all details.\n    let messageContent = {};\n    if (currentQuestionIndex < staticQuestions.length) {\n      messageContent = {\n        questionNumber: currentQuestionIndex + 1,\n        question: currentQuestion.question,\n        ...(inputType === \"radio\" && { options: currentQuestion.options }),\n        ...(inputType === \"slider\" && { options: currentQuestion.labels }),\n        response: currentAnswer,\n      };\n    } else {\n      messageContent = {\n        questionId: currentQuestion.id,\n        section: currentQuestion.section,\n        question: currentQuestion.question,\n        ...(inputType === \"radio\" && { options: currentQuestion.options }),\n        ...(inputType === \"slider\" && {\n          min: currentQuestion.min,\n          max: currentQuestion.max,\n          labels: currentQuestion.labels,\n        }),\n        response: currentAnswer,\n      };\n    }\n    const messageObject = {\n      role: \"user\",\n      content: JSON.stringify(messageContent),\n    };\n    const updatedMessages = [...messages, messageObject];\n    setMessages(updatedMessages);\n\n    const nextIndex = currentQuestionIndex + 1;\n    if (nextIndex < TOTAL_QUESTIONS) {\n      if (nextIndex >= staticQuestions.length) {\n        setLoading(true);\n        const dynamicQuestion = await fetchDynamicQuestion();\n        if (dynamicQuestion) {\n          setQuestions((prev) => [...prev, dynamicQuestion]);\n          setCurrentQuestionIndex(nextIndex);\n          setLoading(false);\n        } else {\n          setLoading(false);\n          return;\n        }\n      } else {\n        setCurrentQuestionIndex(nextIndex);\n      }\n    } else {\n      await processFinalAnalysis(\n        { ...answers, [currentQuestion.id]: currentAnswer },\n        updatedMessages\n      );\n    }\n  };\n\n  // Define handleFinishQuiz for the Review Answers Modal\n  const handleFinishQuiz = async () => {\n    await processFinalAnalysis(answers, messages);\n  };\n\n  // Submit quiz data to API\n  const submitQuizData = async (finalAnswers, messageHistory) => {\n    try {\n      const messagesResponse = await fetchWithTimeout(\"/api/submit-messages\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ messages: messageHistory, sessionId }),\n      });\n      if (!messagesResponse) {\n        throw new Error(\"Failed to submit message history\");\n      }\n      const answersResponse = await fetchWithTimeout(\"/api/submit-answers\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ answers: finalAnswers, sessionId }),\n      });\n      if (!answersResponse) {\n        throw new Error(\"Failed to submit answers\");\n      }\n      return {\n        messagesResult: messagesResponse,\n        answersResult: answersResponse,\n      };\n    } catch (err) {\n      console.error(\"Error submitting quiz data:\", err);\n      throw err;\n    }\n  };\n\n  // Format time display\n  const formatTime = (seconds) => {\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\n  };\n\n  // Render slider labels below the slider\n  const renderSliderLabels = () => {\n    if (!currentQuestion || !currentQuestion.labels) return null;\n    return (\n      <div className=\"flex justify-between w-full mt-2 px-2\">\n        {currentQuestion.labels.map((label, index) => {\n          const displayText = label.includes(\" - \")\n            ? label.split(\" - \")[1]\n            : label;\n          return (\n            <div\n              key={index}\n              className=\"text-xs text-gray-600 text-center\"\n              style={{ width: `${100 / currentQuestion.labels.length}%` }}\n            >\n              {displayText}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // Toggle hint display\n  const toggleHint = () => {\n    if (!showHint && currentQuestion?.hint) {\n      setHint(currentQuestion.hint || \"No hint available for this question.\");\n    }\n    setShowHint(!showHint);\n  };\n\n  // Trigger confetti effect on completion\n  const triggerConfetti = () => {\n    if (typeof window !== \"undefined\" && confetti) {\n      const end = Date.now() + 1500;\n      const colors = [\"#4CAF50\", \"#2196F3\", \"#FFC107\", \"#9C27B0\"];\n      (function frame() {\n        confetti({\n          particleCount: 3,\n          angle: 60,\n          spread: 55,\n          origin: { x: 0 },\n          colors: colors,\n        });\n        confetti({\n          particleCount: 3,\n          angle: 120,\n          spread: 55,\n          origin: { x: 1 },\n          colors: colors,\n        });\n        if (Date.now() < end) {\n          requestAnimationFrame(frame);\n        }\n      })();\n    }\n  };\n\n  // Render the input component based on question type\n  const renderQuestionInput = () => {\n    if (!currentQuestion) return null;\n    switch (inputType) {\n      case \"radio\":\n        return (\n          <RadioGroup\n            value={selectedOption}\n            onValueChange={(value) => {\n              setSelectedOption(value);\n              setValidationError(\"\");\n            }}\n            className=\"gap-3\"\n            orientation=\"vertical\"\n          >\n            {currentQuestion.options.map((option, index) => (\n              <Radio\n                key={index}\n                value={option}\n                description={\n                  option.includes(\" - \") ? option.split(\" - \")[1] : null\n                }\n                classNames={{\n                  base: \"border border-gray-200 rounded-lg p-3 hover:bg-gray-50 transition-transform duration-150 transform hover:scale-105\",\n                }}\n              >\n                {option.includes(\" - \") ? option.split(\" - \")[0] : option}\n              </Radio>\n            ))}\n          </RadioGroup>\n        );\n      case \"slider\":\n        return (\n          <div className=\"w-full\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                {currentQuestion.min}\n              </span>\n              <span className=\"text-lg font-bold text-primary\">\n                {sliderValue !== null && currentQuestion.labels\n                  ? currentQuestion.id === \"q8\"\n                    ? getIntSliderLabel(sliderValue)\n                    : getSliderLabel(sliderValue)\n                  : \"-\"}\n              </span>\n              <span className=\"text-sm font-medium text-gray-700\">\n                {currentQuestion.max}\n              </span>\n            </div>\n            <Slider\n              aria-labelledby={`question-${currentQuestion.id}`}\n              step={currentQuestion.step || 1}\n              min={currentQuestion.min}\n              max={currentQuestion.max}\n              defaultValue={currentQuestion.defaultValue}\n              value={sliderValue}\n              onChange={(value) => {\n                setSliderValue(value);\n                setValidationError(\"\");\n              }}\n              className=\"w-full\"\n              color={sectionColor}\n              size=\"lg\"\n              classNames={{\n                base: \"w-full\",\n                track: \"h-2 bg-gray-300 rounded-full\",\n                indicator:\n                  \"rounded-full bg-gradient-to-r from-blue-500 to-blue-700\",\n                thumb:\n                  \"w-6 h-6 shadow-lg active:scale-125 transition-transform duration-200 bg-current\",\n              }}\n              marks={currentQuestion.labels?.map((label, index) => {\n                const value =\n                  currentQuestion.min +\n                  index *\n                    ((currentQuestion.max - currentQuestion.min) /\n                      (currentQuestion.labels.length - 1));\n                return { value };\n              })}\n            />\n            {renderSliderLabels()}\n          </div>\n        );\n      case \"text\":\n      default:\n        return (\n          <Textarea\n            aria-labelledby={`question-${currentQuestion.id}`}\n            placeholder={\n              currentQuestion.placeholder || \"Type your answer here...\"\n            }\n            value={textAnswer}\n            onChange={(e) => {\n              setTextAnswer(e.target.value);\n              setValidationError(\"\");\n            }}\n            minRows={5}\n            maxRows={10}\n            className=\"w-full\"\n            classNames={{\n              input:\n                \"resize-y focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\",\n              base: \"border-gray-300 hover:border-gray-400 transition-colors duration-200\",\n            }}\n          />\n        );\n    }\n  };\n\n  // Loading state UI\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-6\">\n        <div className=\"text-center bg-white p-8 rounded-xl shadow-lg transform transition-all duration-500 hover:shadow-2xl\">\n          <Spinner color=\"primary\" size=\"lg\" />\n          <p className=\"mt-4 text-lg font-medium text-gray-700 animate-pulse\">\n            Preparing your next question...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state UI\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-6\">\n        <Card className=\"max-w-md w-full shadow-xl transform transition-all duration-500 hover:scale-105\">\n          <CardHeader className=\"flex flex-col gap-1 items-center bg-red-50 text-red-700 border-b border-red-200\">\n            <AlertCircle size={40} className=\"text-red-600\" />\n            <h2 className=\"text-xl font-bold mt-2\">Error Occurred</h2>\n          </CardHeader>\n          <CardBody className=\"text-center py-6\">\n            <p className=\"mb-4 text-gray-800\">{error}</p>\n            <Button\n              color=\"primary\"\n              onClick={() => setError(null)}\n              startContent={<RefreshCw size={18} />}\n              className=\"bg-gradient-to-r from-blue-600 to-blue-800 shadow-md hover:shadow-lg transition-all duration-200\"\n            >\n              Try Again\n            </Button>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n  // No questions available UI\n  if (!currentQuestion) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-6\">\n        <Card className=\"max-w-md w-full shadow-xl\">\n          <CardBody className=\"text-center py-8\">\n            <AlertCircle size={32} className=\"mx-auto mb-4 text-yellow-500\" />\n            <h2 className=\"text-xl font-bold mb-2\">No Questions Available</h2>\n            <p className=\"text-gray-600 mb-6\">\n              Unable to load questions. Please refresh the page or contact\n              support.\n            </p>\n            <Button\n              color=\"warning\"\n              onClick={() => window.location.reload()}\n              startContent={<RotateCcw size={18} />}\n              className=\"shadow-md\"\n            >\n              Refresh Page\n            </Button>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n  // Main quiz UI\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-6 pb-12\">\n      <header className=\"w-full max-w-3xl mb-8 text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Crayon Gen-AI Internship Test\n        </h1>\n        <p className=\"text-gray-600\">Test your skills and understanding.</p>\n      </header>\n\n      {/* Overall Quiz Progress */}\n      <div className=\"w-full max-w-3xl mb-6\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <span className=\"text-sm font-medium text-gray-700\">\n            Progress: {Math.round(progressPercentage)}%\n          </span>\n          <span className=\"text-sm font-medium text-gray-700\">\n            Question {currentQuestionIndex + 1} of {TOTAL_QUESTIONS}\n          </span>\n        </div>\n        <Progress\n          value={progressPercentage}\n          color={sectionColor}\n          size=\"md\"\n          radius=\"full\"\n          showValueLabel={false}\n          aria-label=\"Quiz progress\"\n          className=\"h-2\"\n          classNames={{\n            track: \"rounded-full bg-gray-200\",\n            indicator: `rounded-full bg-gradient-to-r from-${sectionColor}-500 to-${sectionColor}-700`,\n          }}\n        />\n      </div>\n\n      {/* Quiz Card */}\n      <Card className=\"max-w-3xl w-full bg-white shadow-xl rounded-xl overflow-hidden border border-gray-200\">\n        <CardHeader className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center border-b border-gray-200 bg-gray-50 px-6 py-5\">\n          <div className=\"flex items-center gap-3 mb-2 sm:mb-0\">\n            <Chip\n              color={sectionColor}\n              variant=\"flat\"\n              radius=\"sm\"\n              size=\"md\"\n              className=\"font-semibold\"\n              startContent={\n                <SectionIcon section={currentQuestion?.section} size={20} />\n              }\n            >\n              {currentQuestion?.section || \"Question\"}\n            </Chip>\n          </div>\n          <div\n            className=\"flex items-center gap-2 text-gray-600\"\n            title=\"Time remaining to answer this question\"\n          >\n            <Clock\n              size={18}\n              className={isTimerWarning ? \"text-red-500 animate-pulse\" : \"\"}\n            />\n            <span\n              className={`font-mono text-sm ${\n                isTimerWarning ? \"text-red-500 animate-pulse\" : \"\"\n              }`}\n            >\n              {formatTime(timer)}\n            </span>\n          </div>\n        </CardHeader>\n        <CardBody className=\"py-6 px-6\">\n          <motion.h3\n            layout\n            id={`question-${currentQuestion.id}`}\n            className=\"text-xl sm:text-2xl font-semibold text-gray-900 mb-5\"\n          >\n            {currentQuestion?.question}\n          </motion.h3>\n          {validationError && (\n            <motion.div\n              layout\n              className=\"mb-5 p-4 bg-red-50 text-red-700 rounded-md flex items-center gap-2 border border-red-200\"\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2 }}\n            >\n              <AlertCircle size={18} />\n              <span>{validationError}</span>\n            </motion.div>\n          )}\n          <motion.div layout>{renderQuestionInput()}</motion.div>\n          {currentQuestion.hint && (\n            <div className=\"mt-6\">\n              <Tooltip\n                content={<div className=\"text-sm\">{hint}</div>}\n                placement=\"bottom\"\n              >\n                <Button\n                  size=\"sm\"\n                  color=\"warning\"\n                  variant=\"flat\"\n                  isIconOnly\n                  aria-label=\"Show hint\"\n                  className=\"min-w-[40px] h-[40px] p-0\"\n                  onPress={toggleHint}\n                >\n                  <HelpCircle size={20} />\n                </Button>\n              </Tooltip>\n            </div>\n          )}\n        </CardBody>\n        <CardFooter className=\"flex flex-col sm:flex-row justify-between border-t border-gray-200 px-6 py-5\">\n          <div\n            className=\"flex items-center text-sm text-gray-500\"\n            title=\"Enter a thoughtful response before continuing\"\n          >\n            <div className=\"flex items-center gap-1\">\n              <Info size={16} />\n              <span>\n                {isLastQuestion\n                  ? \"This is the final question\"\n                  : \"Answer thoughtfully\"}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex gap-3 mt-3 sm:mt-0\">\n            <Button\n              color=\"primary\"\n              endContent={\n                isLastQuestion ? (\n                  <ListChecks size={18} />\n                ) : (\n                  <ArrowRight size={18} />\n                )\n              }\n              onClick={handleNextQuestion}\n              isDisabled={\n                isQuestionRequired &&\n                ((inputType === \"radio\" && !selectedOption) ||\n                  (inputType === \"text\" && !textAnswer.trim()) ||\n                  (inputType === \"slider\" && sliderValue === null))\n              }\n              size=\"lg\"\n            >\n              {isLastQuestion ? \"Review & Finish\" : \"Next Question\"}\n            </Button>\n          </div>\n        </CardFooter>\n      </Card>\n\n      {/* Processing Modal */}\n      <Modal\n        isOpen={showProcessingModal}\n        onClose={() => {}}\n        hideCloseButton={true}\n        size=\"md\"\n        className=\"bg-white rounded-xl shadow-2xl\"\n        backdrop=\"blur\"\n      >\n        <ModalContent>\n          <ModalHeader className=\"flex flex-col items-center border-b border-gray-200 pb-4\">\n            <h3 className=\"text-xl font-semibold text-gray-900\">\n              {processingProgress < 100\n                ? \"Processing Your Responses\"\n                : \"Analysis Complete!\"}\n            </h3>\n          </ModalHeader>\n          <ModalBody className=\"py-8 px-6 text-center\">\n            <Progress\n              value={processingProgress}\n              color=\"primary\"\n              size=\"lg\"\n              showValueLabel={true}\n              valueLabel={`${processingProgress}%`}\n              className=\"mb-6 h-3 rounded-full\"\n              aria-label=\"Processing progress\"\n              classNames={{\n                track: \"rounded-full bg-gray-200\",\n                indicator: \"rounded-full\",\n                valueLabel: \"text-lg font-semibold text-gray-800\",\n              }}\n            />\n            <p className=\"text-gray-700 mb-3\">{processingStatus}</p>\n            {isProcessing && (\n              <Spinner size=\"md\" color=\"primary\" className=\"mt-4\" />\n            )}\n            {processingProgress === 100 && (\n              <div className=\"mt-6 bg-green-50 p-5 rounded-lg text-center text-green-700 border border-green-200\">\n                <CheckCircle\n                  size={32}\n                  className=\"mx-auto mb-3 text-green-600\"\n                />\n                <p className=\"font-semibold\">\n                  Your responses have been successfully analyzed!\n                </p>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Redirecting to results page shortly...\n                </p>\n              </div>\n            )}\n          </ModalBody>\n          {!isProcessing && processingProgress === 100 && (\n            <ModalFooter className=\"border-t border-gray-200 pt-4\">\n              <Button\n                color=\"primary\"\n                onClick={() => (window.location.href = \"/results\")}\n                className=\"w-full rounded-md shadow-md\"\n                size=\"lg\"\n              >\n                View Detailed Results\n              </Button>\n            </ModalFooter>\n          )}\n        </ModalContent>\n      </Modal>\n\n      {/* Review Answers Modal */}\n      <Modal\n        isOpen={showReviewModal}\n        onClose={() => setShowReviewModal(false)}\n        size=\"lg\"\n        scrollBehavior=\"inside\"\n        className=\"bg-white rounded-xl shadow-2xl\"\n        backdrop=\"blur\"\n      >\n        <ModalContent>\n          <ModalHeader className=\"flex flex-col gap-1\">\n            <h3 className=\"text-xl font-semibold text-center\">\n              Review Your Answers\n            </h3>\n            <p className=\"text-sm text-gray-600 text-center\">\n              Please review your responses before submitting the quiz.\n            </p>\n          </ModalHeader>\n          <ModalBody className=\"px-6 py-4\">\n            {questions.map((q, index) => (\n              <div\n                key={q.id}\n                className=\"mb-6 p-4 rounded-lg border border-gray-200 bg-gray-50\"\n              >\n                <h4 className=\"font-semibold text-lg text-gray-800 mb-3\">\n                  Question {index + 1}: {q.question}\n                </h4>\n                <p className=\"text-gray-700\">\n                  <strong>Your Answer:</strong>{\" \"}\n                  {answers[q.id] || \"No answer provided\"}\n                </p>\n              </div>\n            ))}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"default\"\n              variant=\"flat\"\n              onPress={() => setShowReviewModal(false)}\n            >\n              Back to Edit\n            </Button>\n            <Button\n              color=\"primary\"\n              onPress={handleFinishQuiz}\n              endContent={<CheckCircle size={18} />}\n            >\n              Finish Quiz\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1642, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}